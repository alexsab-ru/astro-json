# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Astro site to GitHub Pages
name: Deploy website to Pages

on:
  workflow_run:
    workflows: ["Scrape Data"]  # Замените на имя вашего рабочего процесса обновления АВН
    types:
      - completed
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths-ignore:
      - '.github/scripts/extractDataUPDAuto.js'
      - '.github/scripts/getDealerData.js'
      - '.github/scripts/mergeJson.js'
      - '.github/scripts/scrape.js'
      - '.github/scripts/scrape.py'
      - '.github/workflows/scrape.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  check-pages:
    runs-on: ubuntu-latest
    outputs:
      pages_enabled: ${{ steps.check-pages.outputs.pages_enabled }}
    steps:
      - name: Check GitHub Pages status
        id: check-pages
        run: |
          PAGES_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pages" \
            -w '%{http_code}' -o /dev/null)
          if [ "$PAGES_STATUS" = "200" ]; then
            echo "pages_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "pages_enabled=false" >> $GITHUB_OUTPUT
          fi

  determine_env:
    needs: check-pages
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.set_env.outputs.env_name }}
    steps:
      - id: set_env
        run: |
          PROD_BRANCHES=("main" "master" "brand" "dealer") # Bash array
          CURRENT_BRANCH="${{ github.ref_name }}"
          IS_PROD=false
          for branch in "${PROD_BRANCHES[@]}"; do
            if [[ "$CURRENT_BRANCH" == "$branch" ]]; then
              IS_PROD=true
              break
            fi
          done
          if $IS_PROD; then
            echo "env_name=production" >> $GITHUB_OUTPUT
          else
            echo "env_name=development" >> $GITHUB_OUTPUT
          fi

  # Build job
  build:
    needs: [check-pages, determine_env]
    if: needs.check-pages.outputs.pages_enabled == 'true'
    concurrency: ci-${{ github.ref }}
    runs-on: ubuntu-latest

    # Указываете окружение и его переменные
    environment:
      name: ${{ needs.determine_env.outputs.env_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Determine changes
        id: check_changes
        run: |
          # Проверка запущен ли экшн вручную или есть ли коммиты за последние 10 минут
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] || [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Run manually. Assuming changes." && echo "changes=true" >> $GITHUB_OUTPUT
          else
            COUNT=$(git rev-list --count HEAD --since="10 minutes ago")
            if [ "$COUNT" -eq "0" ]; then
              echo "No new commits. Exiting workflow." && echo "changes=false" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "New commits found." && echo "changes=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Setup Pages
        id: pages
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/configure-pages@v4

      - name: Build _site folder
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          cp -r src _site

      - name: Upload artifact
        if: steps.check_changes.outputs.changes == 'true'
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

      - name: Create After_deploy text
        if: steps.check_changes.outputs.changes == 'true'
        id: after_deploy
        run: |
          echo text="<blockquote>After deploy</blockquote>" >> $GITHUB_OUTPUT

    outputs:
      changes: ${{ steps.check_changes.outputs.changes }}
      after_deploy: ${{ steps.after_deploy.outputs.text }}

  # Deployment job
  deploy:
    needs: build
    if: needs.build.outputs.changes == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify_telegram:
    needs: [build, deploy]
    if: needs.build.outputs.changes == 'true'
    uses: ./.github/workflows/github-telegram.yml
    with:
      additional-text: |
        $(echo -n '${{ needs.build.outputs.after_deploy }}' | base64)
    secrets:
      TELEGRAM_TO: ${{ secrets.TELEGRAM_TO_AFTER_DEPLOY }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
