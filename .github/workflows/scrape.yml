name: Scrape Data

on:
  schedule:
    - cron: '0 */4 * * *'  # Запускается в 1 по Гринвичу
  push:
    paths:
      - '.github/scripts/extractDataUPDAuto.js'
      - '.github/scripts/getDealerData.js'
      - '.github/scripts/mergeJson.js'
      - '.github/scripts/scrape.js'
      - '.github/scripts/scrape.py'
      - '.github/workflows/scrape.yml'
  workflow_dispatch:
    inputs:
      brand:
        description: 'Select brand to scrape'
        type: choice
        required: true
        options:
          - all
          - geely
          - belgee
          - jac
          - jetour
          - livan
          - gac
          - changan
          - vgv
          - tank
          - haval
          - omoda
          - jaecoo
          - chery
          - evolute
          - kaiyi
          - baic
          - soueast
          - knewstar
          - wey
          - solaris
      commit_changes:
        description: 'Commit changes to repository'
        type: boolean
        required: true
        default: true
      send_notification:
        description: 'Send Telegram notification'
        type: boolean
        required: true
        default: true

jobs:
  scrape_all:
    runs-on: ubuntu-latest
    env:
      USER_AGENT: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36

    # Указываете окружение и его переменные
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
            npm install -g pnpm
            pnpm install --no-frozen-lockfile

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: "x64"

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Chrome env
        run: |
          echo "CHROME_BIN=${CHROME_PATH}" >> $GITHUB_ENV
          echo "Using CHROME_PATH=${CHROME_PATH}"

      # Определяем, какой бренд запускать
      - name: Set brand to scrape
        id: set_brand
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "brand=${{ github.event.inputs.brand }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Определяем бренд по измененным файлам из github.event.path
            if [[ "${{ github.event.path }}" == *"geely"* ]]; then
              echo "brand=geely" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"belgee"* ]]; then
              echo "brand=belgee" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"jac"* ]]; then
              echo "brand=jac" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"jetour"* ]]; then
              echo "brand=jetour" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"livan"* ]]; then
              echo "brand=livan" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"gac"* ]]; then
              echo "brand=gac" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"changan"* ]]; then
              echo "brand=changan" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"kaiyi"* ]]; then
              echo "brand=kaiyi" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"baic"* ]]; then
              echo "brand=baic" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"vgv"* ]]; then
              echo "brand=vgv" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"tank"* ]]; then
              echo "brand=tank" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"haval"* ]]; then
              echo "brand=haval" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"omoda"* ]]; then
              echo "brand=omoda" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"jaecoo"* ]]; then
              echo "brand=jaecoo" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"chery"* ]]; then
              echo "brand=chery" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"evolute"* ]]; then
              echo "brand=evolute" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"soueast"* ]]; then
              echo "brand=soueast" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"knewstar"* ]]; then
              echo "brand=knewstar" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"wey"* ]]; then
              echo "brand=wey" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.path }}" == *"solaris"* ]]; then
              echo "brand=solaris" >> $GITHUB_OUTPUT
            else
              echo "brand=all" >> $GITHUB_OUTPUT
            fi
          else
            echo "brand=all" >> $GITHUB_OUTPUT
          fi

      - name: Create empty output.txt
        run: touch output.txt

      - name: which chrome
        run: |
          echo "CHROME_PATH=${CHROME_PATH}"
          echo "CHROME_BIN=${CHROME_BIN}"
          which google-chrome || true
          which chromium || true

      - name: Run Geely scraper
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'geely' }}
        run: pnpm run scrape-geely
        continue-on-error: true

      - name: Scrape belgee.ru
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'belgee' }}
        run: pnpm run scrape-belgee
        continue-on-error: true

      - name: Scrape jaccar.ru
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'jac' }}
        run: pnpm run scrape-jac
        continue-on-error: true

      - name: Scrape jetour-ru.com
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'jetour' }}
        run: pnpm run scrape-jetour
        continue-on-error: true

      - name: Scrape livan-motors.ru
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'livan' }}
        run: pnpm run scrape-livan
        continue-on-error: true

      - name: Scrape gac.ru
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'gac' }}
        run: pnpm run scrape-gac
        continue-on-error: true

      - name: Scrape changanauto.ru
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'changan' }}
        run: pnpm run scrape-changan
        continue-on-error: true

      - name: Scrape VGV
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'vgv' }}
        run: pnpm run scrape-vgv
        continue-on-error: true

      - name: Scrape tank.ru
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'tank' }}
        run: pnpm run scrape-tank
        continue-on-error: true

      - name: Scrape Haval
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'haval' }}
        run: pnpm run scrape-haval
        continue-on-error: true

      - name: Scrape Omoda
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'omoda' }}
        run: pnpm run scrape-omoda
        continue-on-error: true

      - name: Scrape Jaecoo
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'jaecoo' }}
        run: pnpm run scrape-jaecoo
        continue-on-error: true

      - name: Scrape Chery
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'chery' }}
        run: pnpm run scrape-chery
        continue-on-error: true

      - name: Scrape Evolute
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'evolute' }}
        run: pnpm run scrape-evolute
        continue-on-error: true

      - name: Scrape Soueast
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'soueast' }}
        run: pnpm run scrape-soueast
        continue-on-error: true

      - name: Scrape Knewstar
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'knewstar' }}
        run: pnpm run scrape-knewstar
        continue-on-error: true

      - name: Scrape Wey
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'wey' }}
        run: pnpm run scrape-wey
        continue-on-error: true

      - name: Scrape Solaris
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'solaris' }}
        run: pnpm run scrape-solaris
        continue-on-error: true
      
      - name: Scrape kaiyi-auto.ru
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'kaiyi' }}
        run: pnpm run extract-kaiyi
        continue-on-error: true

      - name: Extract BAIC data
        if: ${{ steps.set_brand.outputs.brand == 'all' || steps.set_brand.outputs.brand == 'baic' }}
        run: pnpm run extract-baic
        continue-on-error: true

      - name: Merge JSON for auto-team.pro
        if: ${{ steps.set_brand.outputs.brand == 'all' }}
        run: pnpm run mergeJson

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --exit-code; then
            echo "changes=true" >> $GITHUB_ENV
            echo "changes=true" >> $GITHUB_OUTPUT
            BRAND_NAME="${{ steps.set_brand.outputs.brand }}"
            if [[ "$BRAND_NAME" == "all" ]]; then
              echo "<blockquote>Updated all brands data</blockquote>" >> output_wrapped.txt
            else
              echo "<blockquote>Updated $BRAND_NAME data</blockquote>" >> output_wrapped.txt
            fi
          elif git status -s; then
            echo "changes=true" >> $GITHUB_ENV
            echo "changes=true" >> $GITHUB_OUTPUT
            BRAND_NAME="${{ steps.set_brand.outputs.brand }}"
            if [[ "$BRAND_NAME" == "all" ]]; then
              echo "<blockquote>Updated all brands data</blockquote>" >> output_wrapped.txt
            else
              echo "<blockquote>Updated $BRAND_NAME data</blockquote>" >> output_wrapped.txt
            fi
          else
            echo "changes=false" >> $GITHUB_ENV
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "<blockquote>Nothing changes</blockquote>" >> output_wrapped.txt
          fi
          if [ -s output.txt ]; then
            echo "$(cat output.txt)" >> output_wrapped.txt
          fi
          # Кодируем содержимое файла в base64
          encoded_output=$(base64 -w 0 output_wrapped.txt)
          # Передаем закодированное значение
          echo "script_output=$encoded_output" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: Commit files
        if: |
          env.changes == 'true' && 
          (github.event_name == 'push' || github.event_name == 'schedule' || github.event.inputs.commit_changes == 'true')
        run: |
            git config --local user.email "support+actions@github.com"
            git config --local user.name "github-actions-bot"
            if [[ $(find ./src -type f -name "*.json") ]]; then git add $(find ./src -type f -name "*.json"); fi
            git commit -m "Update all cars data" -a || echo "No changes to commit"
            git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
            git push origin $GITHUB_REF_NAME
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    outputs:
      changes: ${{ steps.check_changes.outputs.changes }}
      script_output: ${{ steps.check_changes.outputs.script_output }}
  
  notify_telegram:
    needs: scrape_all
    if: |
      needs.scrape_all.outputs.script_output != '' && 
      (github.event_name == 'push' || github.event_name == 'schedule' || github.event.inputs.send_notification == 'true')
    uses: ./.github/workflows/github-telegram.yml
    with:
      additional-text: |
        ${{ needs.scrape_all.outputs.script_output }}
    secrets:
      TELEGRAM_TO: ${{ secrets.TELEGRAM_TO_ERROR }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
